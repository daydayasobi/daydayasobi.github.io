<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TEngine框架学习 实体(Entity)模块</title>
    <link href="/2025/07/31/TEngineLean4/"/>
    <url>/2025/07/31/TEngineLean4/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>本文章都是建立在Winodws平台下测试的，其他平台是否同样适用还未进行验证。<br>TE框架还在更新中，未来可能有较大变动。<br>本教程的模块是借鉴GF框架自行添加的。</p>          </div><div class="note note-info">            <p>TEngine: 2025.5.20</p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章中的实体模块都是根据GF模块自行封装进TE框架的，而且非常依赖框架中的<code>对象池(IObjectPool)</code>、<code>应用池(PoolReference)</code> 模块。除此之外，本模块可能存在一些博主还未发现的Bug，欢迎指正。</p><p>所有的功能和代码的演示都是基于以下项目演示的，欢迎大家参考。<br>GitHub: <a href="https://github.com/DrFlower/TowerDefense-GameFramework-Demo">基于TEngine框架实现的塔防Demo</a></p><h2 id="实体模块介绍"><a href="#实体模块介绍" class="headerlink" title="实体模块介绍"></a>实体模块介绍</h2><p><strong>Entity（实体）模块</strong>是框架用来管理游戏场景中<strong>动态创建的所有物体</strong>（如角色、怪物、武器、特效等）的核心模块，它把这类对象抽象为“实体”，并提供了一套生命周期管理、分组、复用和挂接机制，让开发者可以高效、灵活地处理动态对象。博主个人的理解就是“<strong>实体模块就是强化后的对象池</strong>”。</p><h3 id="模块脚本解析"><a href="#模块脚本解析" class="headerlink" title="模块脚本解析"></a>模块脚本解析</h3><p>下表是实体模块的四个基类的介绍，这些基类是作为<code>模块(Module)</code>添加进TE框架中的（再一次体现出TE框架的优秀，自定义模块添增减的非常便利，完美解耦）。</p><table><thead><tr><th>脚本</th><th>说明</th></tr></thead><tbody><tr><td><strong>Entity</strong></td><td>不负责任何游戏逻辑，只提供“身份、位置、生命周期”的最小公共接口。</td></tr><tr><td><strong>EntityLogic</strong></td><td>开发者编写的逻辑类，用于处理实体的生命周期（如 <code>OnShow</code>、<code>OnHide</code>等）。</td></tr><tr><td><strong>EntityData</strong></td><td>每个实体都需要一个数据类，类似于<strong>一次性变量容器</strong>，用于存储实体的配置信息（如类型、位置、属性等），用于初始化时传参。</td></tr><tr><td><strong>EntityModule</strong></td><td>框架内部用于记录所有实体和实体组的组件，提供实体的生成、销毁、查询和<code>Entity</code>的轮询。</td></tr></tbody></table><p>下表是实体模块应用层的主要脚本。</p><table><thead><tr><th>脚本</th><th>说明</th></tr></thead><tbody><tr><td><strong>EntityDataControl</strong></td><td>为了方便对象池管理。这是实际上生成、销毁实体的类，通过该类再调用框架里的<code>EntityModule</code>。</td></tr><tr><td><strong>xxxEntity</strong></td><td>继承自<code>Entity</code>，管理模块销毁时推入对象池。</td></tr><tr><td><strong>xxxEntityLogic</strong></td><td>继承自<code>EntityLogic</code>，实体的逻辑处理都在这里完成。</td></tr><tr><td><strong>xxxEntityData</strong></td><td>每个实体都需要一个数据类，继承自<code>EntityLogic</code>，类似于<strong>一次性变量容器</strong>，用于存储实体的配置信息（如类型、位置、属性等），用于初始化时传参</td></tr></tbody></table><p>总结一下，实体就是<code>GameObjecg+Entity脚本+EngityLogic脚本</code>，初始化时由<code>EntityData</code>传参，有自己的对象池管理和生命周期管理。</p><h3 id="本模块与GF实体模块的区别"><a href="#本模块与GF实体模块的区别" class="headerlink" title="本模块与GF实体模块的区别"></a>本模块与GF实体模块的区别</h3><p>博主自己封装的实体模块和GF的实体模块有很大不同，这里简单讲讲区别：</p><ol><li><p>最大的区别就是移除了GF框架中的<code>EntityGroup</code>模块，用TE的对象池和应用池管理。</p></li><li><p>GF框架中<code>Entity脚本</code>和<code>EntityLogic脚本</code>都是运行时添加，更进一步还要读表——找到对应Logic脚本——添加脚本到GameObject，博主这里就不整这么麻烦了，都是手动提前挂在好的。</p></li><li><p>为每个实体添加了一个唯一的<code>int m_SerialId</code>标示，所有的查找、销毁、存储都会用到。</p></li><li><p>实体存在子实体的情况，这里稍微简化了，移除了GF框架中的相关功能，但是添加了一个链表<code>List&lt;int&gt; childSerialIds</code>存储子实体的序列号</p></li></ol><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><div class="note note-warning">            <p>以下代码仅供参考，不是很完整，具体请参考前言中的Demo</p>          </div><p>下面会贴出实体模块的三个模块脚本（<code>EntityModule、Entity、EntityLogic</code>），一个应用层管理脚本（<code>EntityDataControl</code>）， 还有一个其他脚本（<code>EntityData</code>）。</p>    <div class="fold">      <div class="fold-title fold-`EntityModule`模块和对应的接口 collapsed" data-toggle="collapse" href="#collapse-53237f8b" role="button" aria-expanded="false" aria-controls="collapse-53237f8b">        <div class="fold-arrow">▶</div>EntityModule脚本和对应的接口      </div>      <div class="fold-collapse collapse" id="collapse-53237f8b">        <div class="fold-content">          <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> System;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">TEngine</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IEntityModule</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GenerateSerialId</span>()</span>;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideEntity</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> serialId</span>)</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideAllEntity</span>()</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideEntity</span>(<span class="hljs-params">Entity entity</span>)</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddToDic</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> serialId, Entity entity</span>)</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RemoveFromDic</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> serialId</span>)</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerable&lt;Entity&gt; <span class="hljs-title">GetAllEntities</span>()</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">TEngine</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EntityModule</span> : <span class="hljs-title">Module</span>, <span class="hljs-title">IUpdateModule</span>, <span class="hljs-title">IEntityModule</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">int</span>, Entity&gt; _dicSerial2Entity;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> serialId;<br>        <span class="hljs-keyword">private</span> IEntityModule _entityModuleImplementation;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取游戏框架模块优先级。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;remarks&gt;</span>优先级较高的模块会优先轮询，并且关闭操作会后进行。<span class="hljs-doctag">&lt;/remarks&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">int</span> Priority =&gt; <span class="hljs-number">7</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInit</span>()</span><br>        &#123;<br>            _dicSerial2Entity = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, Entity&gt;();<br>            serialId = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Shutdown</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> elapseSeconds, <span class="hljs-built_in">float</span> realElapseSeconds</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                <span class="hljs-keyword">var</span> entities = <span class="hljs-keyword">new</span> List&lt;Entity&gt;(_dicSerial2Entity.Values);<br>                <br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> entity <span class="hljs-keyword">in</span> entities)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (entity != <span class="hljs-literal">null</span> &amp;&amp; entity.Logic != <span class="hljs-literal">null</span>)<br>                    &#123;<br>                        entity.Logic.OnUpdate(elapseSeconds, realElapseSeconds);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)<br>            &#123;<br>                Console.WriteLine(e);<br>                <span class="hljs-keyword">throw</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GenerateSerialId</span>()</span><br>        &#123;<br>            serialId += <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">return</span> serialId;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideEntity</span>(<span class="hljs-params">Entity entity</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (entity == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span>;<br><br>            Log.Debug(<span class="hljs-string">&quot;EntityModuleEx Hide Entity &#123;0&#125;&quot;</span>, entity.SerialId);<br>            HideEntity(entity.SerialId);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideEntity</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> serialId</span>)</span><br>        &#123;<br>            Entity entity = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (!_dicSerial2Entity.TryGetValue(serialId, <span class="hljs-keyword">out</span> entity))<br>            &#123;<br>                Log.Error(<span class="hljs-string">&quot;Can find entity(&#x27;serial id:&#123;0&#125;&#x27;) &quot;</span>, serialId);<br>            &#125;<br><br>            Entity tempEntity = _dicSerial2Entity[serialId];<br>            List&lt;<span class="hljs-built_in">int</span>&gt; childSerialIds = tempEntity.GetChildrenIds();<br>            RemoveFromDic(serialId);<br><br>            Log.Debug(<span class="hljs-string">&quot;HideEntity serialId:&#123;0&#125; entity count:&#123;1&#125; childSerialIds:&#123;2&#125;&quot;</span>, serialId, _dicSerial2Entity.Count, childSerialIds.Count);<br><br>            <span class="hljs-keyword">if</span> (childSerialIds.Count &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> childSerialIds)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (_dicSerial2Entity.ContainsKey(item))<br>                    &#123;<br>                        HideEntity(item);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            tempEntity.OnHide(<span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>            tempEntity.Clear();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideAllEntity</span>()</span><br>        &#123;<br>            List&lt;<span class="hljs-built_in">int</span>&gt; towerSerialIds = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(_dicSerial2Entity.Keys);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; towerSerialIds.Count; i++)<br>            &#123;<br>                HideEntity(towerSerialIds[i]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddToDic</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> serialId, Entity entity</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!_dicSerial2Entity.ContainsKey(serialId))<br>            &#123;<br>                _dicSerial2Entity.Add(serialId, entity);<br>                Log.Debug(<span class="hljs-string">&quot;AddToDic serialId:&#123;0&#125; entity count:&#123;1&#125;&quot;</span>, serialId, _dicSerial2Entity.Count);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                _dicSerial2Entity[serialId] = entity;<br>                Log.Debug(<span class="hljs-string">&quot;UpdateToDic serialId:&#123;0&#125; entity count:&#123;1&#125;&quot;</span>, serialId, _dicSerial2Entity.Count);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RemoveFromDic</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> serialId</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_dicSerial2Entity.ContainsKey(serialId))<br>            &#123;<br>                _dicSerial2Entity.Remove(serialId);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerable&lt;Entity&gt; <span class="hljs-title">GetAllEntities</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> _dicSerial2Entity.Values;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>        &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-`Entity`基类代码 collapsed" data-toggle="collapse" href="#collapse-9c4b35b3" role="button" aria-expanded="false" aria-controls="collapse-9c4b35b3">        <div class="fold-arrow">▶</div>Entity脚本      </div>      <div class="fold-collapse collapse" id="collapse-9c4b35b3">        <div class="fold-content">          <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> TEngine;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">TEngine</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Entity</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IMemory</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_Id;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_SerialId; <span class="hljs-comment">//序列号Id</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> m_EntityAssetName;<br>        <span class="hljs-keyword">private</span> EntityLogic m_EntityLogic;<br>        <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">int</span>&gt; childSerialIds = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取实体编号。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_Id; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取实体序列号Id。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> SerialId<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_SerialId; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取实体资源名称。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> EntityAssetName<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_EntityAssetName; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取实体实例。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">object</span> Handle<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> gameObject; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取实体逻辑。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> EntityLogic Logic<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_EntityLogic; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体初始化。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;entityId&quot;&gt;</span>实体编号。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;entityAssetName&quot;&gt;</span>实体资源名称。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInit</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> entityId, <span class="hljs-built_in">int</span> serialId, <span class="hljs-built_in">string</span> entityAssetName, EntityLogic entityLogic</span>)</span><br>        &#123;<br>            m_Id = entityId;<br>            m_SerialId = serialId;<br>            m_EntityAssetName = entityAssetName;<br>            m_EntityLogic = entityLogic;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体回收。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRecycle</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                m_EntityLogic.OnRecycle();<br>                m_EntityLogic.enabled = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception exception)<br>            &#123;<br>                Log.Error(<span class="hljs-string">&quot;Entity &#x27;[&#123;0&#125;]&#123;1&#125;&#x27; OnRecycle with exception &#x27;&#123;2&#125;&#x27;.&quot;</span>, m_Id.ToString(), m_EntityAssetName, exception.ToString());<br>            &#125;<br><br>            m_Id = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体显示。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnShow</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                m_EntityLogic.OnShow(userData);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception exception)<br>            &#123;<br>                Log.Error(<span class="hljs-string">&quot;Entity &#x27;[&#123;0&#125;]&#123;1&#125;&#x27; OnShow with exception &#x27;&#123;2&#125;&#x27;.&quot;</span>, m_Id.ToString(), m_EntityAssetName, exception.ToString());<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体隐藏。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;isShutdown&quot;&gt;</span>是否是关闭实体管理器时触发。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnHide</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> isShutdown, <span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                Log.Debug(<span class="hljs-string">&quot;OnHide &#123;0&#125;&quot;</span>, m_EntityAssetName);<br>                m_EntityLogic.OnHide(isShutdown, userData);<br>                m_Id = <span class="hljs-number">0</span>;<br>                m_EntityAssetName = <span class="hljs-built_in">string</span>.Empty;<br>                childSerialIds.Clear();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception exception)<br>            &#123;<br>                Log.Error(<span class="hljs-string">&quot;Entity &#x27;[&#123;0&#125;]&#123;1&#125;&#x27; OnHide with exception &#x27;&#123;2&#125;&#x27;.&quot;</span>, m_Id.ToString(), m_EntityAssetName, exception.ToString());<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnAttachedId</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> SerialId</span>)</span><br>        &#123;<br>            childSerialIds.Add(SerialId);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDetachedId</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> SerialIds</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; childSerialIds.Count; i++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (childSerialIds[i] == SerialIds)<br>                &#123;<br>                    childSerialIds.RemoveAt(i);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetChildrenIds</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> childSerialIds;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>        &#123;<br>            m_Id = <span class="hljs-number">0</span>;<br>            m_EntityAssetName = <span class="hljs-built_in">string</span>.Empty;<br>            childSerialIds.Clear();<br>            <span class="hljs-comment">// PoolManager.Instance.PushGameObject(this.gameObject);</span><br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体轮询。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnUpdate</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> elapseSeconds, <span class="hljs-built_in">float</span> realElapseSeconds</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                m_EntityLogic.OnUpdate(elapseSeconds, realElapseSeconds);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception exception)<br>            &#123;<br>                Log.Error(<span class="hljs-string">&quot;Entity &#x27;[&#123;0&#125;]&#123;1&#125;&#x27; OnUpdate with exception &#x27;&#123;2&#125;&#x27;.&quot;</span>, m_Id.ToString(), m_EntityAssetName, exception.ToString());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-`EntityLogic`基类代码 collapsed" data-toggle="collapse" href="#collapse-5b75660a" role="button" aria-expanded="false" aria-controls="collapse-5b75660a">        <div class="fold-arrow">▶</div>EntityLogic脚本      </div>      <div class="fold-collapse collapse" id="collapse-5b75660a">        <div class="fold-content">          <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> TEngine;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">TEngine</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体逻辑基类。</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EntityLogic</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IMemory</span><br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> m_Available = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> m_Visible = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">private</span> Entity m_Entity = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">private</span> Transform m_CachedTransform = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> m_OriginalLayer = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> Transform m_OriginalTransform = <span class="hljs-literal">null</span>;<br>        <br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取实体。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> Entity Entity<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> m_Entity;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取或设置实体名称。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> gameObject.name;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                gameObject.name = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取实体是否可用。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Available<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> m_Available;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取或设置实体是否可见。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Visible<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> m_Available &amp;&amp; m_Visible;<br>            &#125;<br>            <span class="hljs-keyword">set</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (!m_Available)<br>                &#123;<br>                    Log.Warning(<span class="hljs-string">&quot;Entity &#x27;&#123;0&#125;&#x27; is not available.&quot;</span>, Name);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (m_Visible == <span class="hljs-keyword">value</span>)<br>                &#123;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                m_Visible = <span class="hljs-keyword">value</span>;<br>                InternalSetVisible(<span class="hljs-keyword">value</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 获取已缓存的 Transform。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> Transform CachedTransform<br>        &#123;<br>            <span class="hljs-keyword">get</span><br>            &#123;<br>                <span class="hljs-keyword">return</span> m_CachedTransform;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体初始化。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnInit</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (m_CachedTransform == <span class="hljs-literal">null</span>)<br>            &#123;<br>                m_CachedTransform = transform;<br>            &#125;<br><br>            m_Entity = GetComponent&lt;Entity&gt;();<br>            m_OriginalLayer = gameObject.layer;<br>            m_OriginalTransform = CachedTransform.parent;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体回收。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRecycle</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体显示。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnShow</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            m_Available = <span class="hljs-literal">true</span>;<br>            Visible = <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体隐藏。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;isShutdown&quot;&gt;</span>是否是关闭实体管理器时触发。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnHide</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> isShutdown, <span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == <span class="hljs-literal">null</span> || gameObject == <span class="hljs-literal">null</span>)<br>            &#123;<br>                Log.Warning(<span class="hljs-string">&quot;EntityLogic.OnHide: Object already destroyed.&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 待实现方法 递归实现游戏层次</span><br>            <span class="hljs-comment">// gameObject.SetLayerRecursively(m_OriginalLayer);</span><br>            Visible = <span class="hljs-literal">false</span>;<br>            m_Available = <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体附加子实体。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;childEntity&quot;&gt;</span>附加的子实体。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parentTransform&quot;&gt;</span>被附加父实体的位置。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnAttached</span>(<span class="hljs-params">EntityLogic childEntity, Transform parentTransform, <span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体解除子实体。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;childEntity&quot;&gt;</span>解除的子实体。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDetached</span>(<span class="hljs-params">EntityLogic childEntity, <span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体附加子实体。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parentEntity&quot;&gt;</span>被附加的父实体。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parentTransform&quot;&gt;</span>被附加父实体的位置。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnAttachTo</span>(<span class="hljs-params">EntityLogic parentEntity, Transform parentTransform, <span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            CachedTransform.SetParent(parentTransform);<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体解除子实体。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parentEntity&quot;&gt;</span>被解除的父实体。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;userData&quot;&gt;</span>用户自定义数据。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDetachFrom</span>(<span class="hljs-params">EntityLogic parentEntity, <span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            CachedTransform.SetParent(m_OriginalTransform);<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体轮询。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">internal</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnUpdate</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> elapseSeconds, <span class="hljs-built_in">float</span> realElapseSeconds</span>)</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 设置实体的可见性。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;visible&quot;&gt;</span>实体的可见性。<span class="hljs-doctag">&lt;/param&gt;</span></span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InternalSetVisible</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> visible</span>)</span><br>        &#123;<br>            gameObject.SetActive(visible);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>        &#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-`EntityData脚本 collapsed" data-toggle="collapse" href="#collapse-c283c6f2" role="button" aria-expanded="false" aria-controls="collapse-c283c6f2">        <div class="fold-arrow">▶</div>EntityData脚本      </div>      <div class="fold-collapse collapse" id="collapse-c283c6f2">        <div class="fold-content">          <p>因为博主想要使用应用池，所以Demo里实体模块里没有<code>EntityData</code>基类脚本，实际体验上也差不多吧，有兴趣可以自己修改添加。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> Com.LuisPedroFonseca.ProCamera2D;<br><span class="hljs-keyword">using</span> TEngine;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GameLogic</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EntityData</span> : <span class="hljs-title">IMemory</span><br>    &#123;<br>        <span class="hljs-keyword">protected</span> Vector3 m_Position = Vector3.zero;<br><br>        <span class="hljs-keyword">protected</span> Quaternion m_Rotation = Quaternion.identity;<br><br>        <span class="hljs-keyword">protected</span> Transform m_Parent = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-built_in">int</span> m_SerialId = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">protected</span> ProCamera2D m_Cam = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EntityData</span>()</span><br>        &#123;<br>            m_Position = Vector3.zero;<br>            m_Rotation = Quaternion.identity;<br>            UserData = <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体位置。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> Vector3 Position<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_Position; &#125;<br>            <span class="hljs-keyword">set</span> &#123; m_Position = <span class="hljs-keyword">value</span>; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体朝向。</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> Quaternion Rotation<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_Rotation; &#125;<br>            <span class="hljs-keyword">set</span> &#123; m_Rotation = <span class="hljs-keyword">value</span>; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 实体根节点</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> Transform Parent<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_Parent; &#125;<br>            <span class="hljs-keyword">set</span> &#123; m_Parent = <span class="hljs-keyword">value</span>; &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> ProCamera2D Cam<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_Cam; &#125;<br>            <span class="hljs-keyword">set</span> &#123; m_Cam = <span class="hljs-keyword">value</span>; &#125;<br>        &#125;<br><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> 序列号码</span><br>        <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> SerialId<br>        &#123;<br>            <span class="hljs-keyword">get</span> &#123; <span class="hljs-keyword">return</span> m_SerialId; &#125;<br>            <span class="hljs-keyword">set</span> &#123; m_SerialId = <span class="hljs-keyword">value</span>; &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">object</span> UserData &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">protected</span> <span class="hljs-keyword">set</span>; &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EntityData <span class="hljs-title">Create</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> serialId, <span class="hljs-built_in">object</span> userData = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            EntityData entityData = PoolReference.Acquire&lt;EntityData&gt;();<br>            entityData.Position = Vector3.zero;<br>            entityData.Rotation = Quaternion.identity;<br>            entityData.UserData = userData;<br>            <span class="hljs-keyword">return</span> entityData;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EntityData <span class="hljs-title">Create</span>(<span class="hljs-params">Vector3 position, <span class="hljs-built_in">int</span> serialId, <span class="hljs-built_in">object</span> userData = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            EntityData entityData = PoolReference.Acquire&lt;EntityData&gt;();<br>            entityData.Position = position;<br>            entityData.Rotation = Quaternion.identity;<br>            entityData.UserData = userData;<br>            entityData.m_SerialId = serialId;<br>            <span class="hljs-keyword">return</span> entityData;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EntityData <span class="hljs-title">Create</span>(<span class="hljs-params">Vector3 position, <span class="hljs-built_in">int</span> serialId, ProCamera2D camera, <span class="hljs-built_in">object</span> userData = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            EntityData entityData = PoolReference.Acquire&lt;EntityData&gt;();<br>            entityData.Position = position;<br>            entityData.Rotation = Quaternion.identity;<br>            entityData.UserData = userData;<br>            entityData.m_SerialId = serialId;<br>            entityData.m_Cam = camera;<br>            <span class="hljs-keyword">return</span> entityData;<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EntityData <span class="hljs-title">Create</span>(<span class="hljs-params">Vector3 position, Quaternion quaternion, <span class="hljs-built_in">int</span> serialId, <span class="hljs-built_in">object</span> userData = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            EntityData entityData = PoolReference.Acquire&lt;EntityData&gt;();<br>            entityData.Position = position;<br>            entityData.Rotation = quaternion;<br>            entityData.UserData = userData;<br>            entityData.m_SerialId = serialId;<br>            <span class="hljs-keyword">return</span> entityData;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EntityData <span class="hljs-title">Create</span>(<span class="hljs-params">Vector3 position, <span class="hljs-built_in">int</span> serialId, Transform parent, <span class="hljs-built_in">object</span> userData = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            EntityData entityData = PoolReference.Acquire&lt;EntityData&gt;();<br>            entityData.Position = position;<br>            entityData.UserData = userData;<br>            entityData.Parent = parent;<br>            entityData.m_SerialId = serialId;<br>            <span class="hljs-keyword">return</span> entityData;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EntityData <span class="hljs-title">Create</span>(<span class="hljs-params">Vector3 position, Quaternion quaternion, Transform parent, <span class="hljs-built_in">int</span> serialId, <span class="hljs-built_in">object</span> userData = <span class="hljs-literal">null</span></span>)</span><br>        &#123;<br>            EntityData entityData = PoolReference.Acquire&lt;EntityData&gt;();<br>            entityData.Position = position;<br>            entityData.Rotation = quaternion;<br>            entityData.UserData = userData;<br>            entityData.Parent = parent;<br>            entityData.m_SerialId = serialId;<br>            <span class="hljs-keyword">return</span> entityData;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>        &#123;<br>            m_Position = Vector3.zero;<br>            m_Rotation = Quaternion.identity;<br>            UserData = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-`EntityDataControl`脚本和一些注解 collapsed" data-toggle="collapse" href="#collapse-0261245e" role="button" aria-expanded="false" aria-controls="collapse-0261245e">        <div class="fold-arrow">▶</div>EntityDataControl脚本      </div>      <div class="fold-collapse collapse" id="collapse-0261245e">        <div class="fold-content">          <div class="note note-info">            <p>在创建和使用实体的时候，根据不同实体要获取不同的<code>EntityLogic</code>，博主这里偷懒就用了一个<code>_logicMap</code>的字典，比较呆，读者可以自行优化成利用反射获取对应的<code>EntityLogic</code>。</p>          </div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.Linq;<br><span class="hljs-keyword">using</span> System.Text;<br><span class="hljs-keyword">using</span> System.Threading.Tasks;<br><span class="hljs-keyword">using</span> GameConfig;<br><span class="hljs-keyword">using</span> TEngine;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> Object = System.Object;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">GameLogic</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EntityDataControl</span> : <span class="hljs-title">Singleton</span>&lt;<span class="hljs-title">EntityDataControl</span>&gt;<br>    &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Dictionary&lt;EnumProjectile, Type&gt; _projectileLogicMap = <span class="hljs-keyword">new</span>()<br>        &#123;<br>            &#123; EnumProjectile.EntityProjectileHitscanLogic, <span class="hljs-keyword">typeof</span>(EntityProjectileHitscanLogic) &#125;,<br>            &#123; EnumProjectile.EntityProjectileBallisticLogic, <span class="hljs-keyword">typeof</span>(EntityProjectileBallisticLogic) &#125;,<br>            &#123; EnumProjectile.EntityEnergyPylonLogic, <span class="hljs-keyword">typeof</span>(EntityEnergyPylonLogic) &#125;,<br>            &#123; EnumProjectile.EntityEMPGeneratorLogic, <span class="hljs-keyword">typeof</span>(EntityEMPGeneratorLogic) &#125;,<br>            &#123; EnumProjectile.EntityProjectileWobblingHomingLogic, <span class="hljs-keyword">typeof</span>(EntityProjectileWobblingHomingLogic) &#125;<br>        &#125;;<br>        <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> Dictionary&lt;Type, Action&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span>, Action&lt;Entity&gt;, <span class="hljs-built_in">object</span>&gt;&gt; _logicMap = <span class="hljs-keyword">new</span>()<br>        &#123;<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityPlayerLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityPlayerLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityRocketPlatformLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityRocketPlatformLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityTowerBaseLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityTowerBaseLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityTowerLevelLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityTowerLevelLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityTowerAttackerLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityTowerAttackerLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityTowerPreviewLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityTowerPreviewLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityRadiusLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityRadiusLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityEnemyLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityEnemyLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityProjectileHitscanLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityProjectileHitscanLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityParticleAutoHideLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityParticleAutoHideLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityHPBarLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityHPBarLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityProjectileBallisticLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityProjectileBallisticLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityHideSelfProjectileLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityHideSelfProjectileLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityProjectileLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityProjectileLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityEnergyPylonLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityEnergyPylonLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityEMPGeneratorLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityEMPGeneratorLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityProjectileWobblingHomingLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityProjectileWobblingHomingLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityPlasmaLanceLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityPlasmaLanceLogic&gt;(id, serial, cb, data) &#125;,<br>            &#123; <span class="hljs-keyword">typeof</span>(EntityAnimationLogic), (id, serial, cb, data) =&gt; ShowEntity&lt;EntityAnimationLogic&gt;(id, serial, cb, data) &#125;,<br>        &#125;;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Type <span class="hljs-title">GetProjectileLogicType</span>(<span class="hljs-params">EnumProjectile projectileType</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (_projectileLogicMap.TryGetValue(projectileType, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> logicType))<br>            &#123;<br>                <span class="hljs-keyword">return</span> logicType;<br>            &#125;<br><br>            Log.Error(<span class="hljs-string">&quot;未找到对应的 Projectile 逻辑类型: &#123;0&#125;&quot;</span>, projectileType);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ShowEntity</span>&lt;<span class="hljs-title">TLogic</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">int</span> entityId,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-built_in">int</span> serialId,</span></span><br><span class="hljs-params"><span class="hljs-function">            Action&lt;Entity&gt; onShowSuccess,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-built_in">object</span> userData = <span class="hljs-literal">null</span></span>) <span class="hljs-keyword">where</span> TLogic : EntityLogic</span><br>        &#123;<br>            <span class="hljs-built_in">string</span> pathName = AssetsDataLoader.Instance.GetItemConfig(entityId).ResourcesName;<br>            <span class="hljs-keyword">if</span> (pathName == <span class="hljs-literal">null</span>)<br>            &#123;<br>                Log.Error(<span class="hljs-string">&quot;EntityDataControl ShowEntity pathName is null, entityId: &#123;0&#125;&quot;</span>, entityId);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            GameObject gameObject = PoolManager.Instance.GetGameObject(pathName);<br>            Entity entity = gameObject.GetComponent&lt;Entity&gt;();<br><br>            <span class="hljs-comment">// 泛型获取逻辑类</span><br>            TLogic entityLogic = gameObject.GetComponent&lt;TLogic&gt;();<br><br>            <span class="hljs-keyword">if</span> (entityLogic == <span class="hljs-literal">null</span>)<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">$&quot;GameObject <span class="hljs-subst">&#123;gameObject.name&#125;</span> 没有组件 <span class="hljs-subst">&#123;<span class="hljs-keyword">typeof</span>(TLogic).Name&#125;</span>&quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">// 初始化Entity</span><br>            entity.OnInit(entityId, serialId, pathName, entityLogic);<br>            <span class="hljs-comment">// 初始化EntityLogic</span><br>            entityLogic.OnInit(userData);<br><br>            GameModule.Entity.AddToDic(serialId, entity);<br>            entity.OnShow(userData);<br><br>            onShowSuccess?.Invoke(entity);<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ShowEntity</span>(<span class="hljs-params">ShowEntityEventData entityData</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (!_logicMap.TryGetValue(entityData.LogicType, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> action))<br>            &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidOperationException(<span class="hljs-string">$&quot;未知的逻辑类型: <span class="hljs-subst">&#123;entityData.LogicType.FullName&#125;</span>&quot;</span>);<br>            &#125;<br><br>            Log.Debug(<span class="hljs-string">&quot;ShowEntity entityId:&#123;0&#125; &quot;</span>, entityData.EntityId);<br><br>            Action&lt;Entity&gt; callback = entity =&gt;<br>            &#123;<br>                entityData.OnShowSuccess?.Invoke(entity);<br>                entityData.Clear();<br>            &#125;;<br><br>            action.Invoke(entityData.EntityId, entityData.SerialId, callback, entityData.UserData);<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideEntity</span>(<span class="hljs-params">Entity entity</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (entity == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span>;<br><br>            GameModule.Entity.HideEntity(entity);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HideAllEntities</span>()</span><br>        &#123;<br>            Log.Debug(<span class="hljs-string">&quot;HideAllEntities&quot;</span>);<br>            GameModule.Entity.HideAllEntity();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> IEnumerable&lt;Entity&gt; <span class="hljs-title">GetAllEntities</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">return</span> GameModule.Entity.GetAllEntities();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>        &#123;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EntityShowOptionsArgs</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> EntityId;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ManualSerialId;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> AutoGenerateSerialId = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> Type LogicType;<br>        <span class="hljs-keyword">public</span> Action&lt;Entity&gt; OnShowSuccess;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">object</span> UserData;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EntityShowOptionsArgs</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-built_in">int</span> entityId,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-built_in">int</span> manualSerialId,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-built_in">bool</span> autoGenerateSerialId,</span></span><br><span class="hljs-params"><span class="hljs-function">            Type logicType,</span></span><br><span class="hljs-params"><span class="hljs-function">            Action&lt;Entity&gt; onShowSuccess,</span></span><br><span class="hljs-params"><span class="hljs-function">            <span class="hljs-built_in">object</span> userData</span>)</span><br>        &#123;<br>            EntityId = entityId;<br>            ManualSerialId = manualSerialId;<br>            AutoGenerateSerialId = autoGenerateSerialId;<br>            LogicType = logicType;<br>            <span class="hljs-keyword">this</span>.OnShowSuccess = onShowSuccess;<br>            UserData = userData;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ShowEntityEventData</span> : <span class="hljs-title">IMemory</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> EntityId;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> SerialId;<br>        <span class="hljs-keyword">public</span> Type LogicType;<br>        <span class="hljs-keyword">public</span> Object UserData;<br>        <span class="hljs-keyword">public</span> Action&lt;Entity&gt; OnShowSuccess = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Clear</span>()</span><br>        &#123;<br>            EntityId = <span class="hljs-number">0</span>;<br>            SerialId = <span class="hljs-number">0</span>;<br>            LogicType = <span class="hljs-literal">null</span>;<br>            UserData = <span class="hljs-literal">null</span>;<br>            OnShowSuccess = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="一些示例"><a href="#一些示例" class="headerlink" title="一些示例"></a>一些示例</h2><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507311153596.png" alt="等级三加农炮塔"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507311155121.png" alt="实体结构"></div><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507311156685.png" alt="子实体"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507311200252.png" alt="对象池"></div></div></div><p>在上面的示例中，图一是运行中的截图，加农炮台就是实体挂载实体的形式，图二和图三分别是母实体和子实体，母实体是负责调用攻击、音效、特效等业务的，子实体是负责模型、属性等业务的。<br>图四是对象池的运用，可以看到炮塔升到三级，但是二级一级的实体被推入对象池中等待复用，<code>BuildPfx</code>是构建炮塔的特效，同样也接受对象池管理。</p><!-- flag of hidden posts -->]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>TEngine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEngine框架学习 热更新和分包下载</title>
    <link href="/2025/07/11/TEngineLean3/"/>
    <url>/2025/07/11/TEngineLean3/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p>本文章都是建立在Winodws平台下测试的，其他平台是否同样适用还未进行验证。<br>TE框架还在更新中，未来可能有较大变动。</p>          </div><div class="note note-info">            <p>TEngine: 2025.5.20</p>          </div><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>TE框架自带了一套完整的热更流程，也有很多优秀的博主做过相关教程，这里的文章以记录为主补充为辅，希望能够帮助到在学习TE框架时遇到问题的读者。</p><h3 id="启用热更新"><a href="#启用热更新" class="headerlink" title="启用热更新"></a>启用热更新</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301149433.jpg" alt="打开安装界面"></div><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301149007.jpg" alt="安装界面"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301150207.jpg" alt="启用热更新"></div><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301150770.jpg" alt="设置工程模拟"></div></div></div><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301156479.jpg" alt="打开配置文件"></div><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301156142.jpg" alt="修改配置文件"></div></div></div><p>大部分的热更设置都能在<code>UpdateSetting</code>文件中修改，<code>ResDownLoadPath</code>就是资源下载的地址，还有诸如是否强制更新、是否提醒更新这里不做赘述，可以看源码理解一下，这里只涉及配置没有涉及到逻辑功能。</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301204313.jpg" alt="生成热更代码1"></div><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301204845.jpg" alt="生成热更代码2"></div></div></div><p>上面的两步是生成代码的热更文件和插件Dll，运行成功的话再<code>AssetRaw目录下DLL文件夹</code>下应该包含dll文件，如果为空请查看一下热更生成报错。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301210368.png" alt="YooAsset打包"></div><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301213911.png" alt="打包方式"></div><div class="group-image-wrap"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301225773.png" alt="资源索引"></div></div></div><p>上面的图一偷一个懒，将工程设置和YooAsset构建放在一起了，相同颜色的方框代表两个选项要保持一致，就如上图，默认包为DefaultPackage，加密方式为File Off Set。</p><p>图二展示的是几种打包方式，如果选择可以查看官网教程，这里单独说两种，<br><code>None</code>:构建资源但是不做任何操作（StreamingAssets为空）。<br><code>ClearAndCopyAll</code>:构建资源并且复制到StreamingAssets下。<br>前者方便我们单独打更新包或者补充包，后者方便打首包，具体区别可以都试试看。不管怎么样，StreamingAssets下至少应该要包含图三中的文件，本地会用这些文件和服务器中的索引进行比较，没有的话会报错。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>可以使用HFS文件服务器部署本地的服务器，如果是默认的配置，将打包生成的所有文件放入<code>LocalServer\yourProjectName\Windows64\xxxx</code>下面&#96;，运行工程即可。</p><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301409906.png" alt="允许Http链接"></p><p>本地测试需要打开HTTP链接，否则会报错，Unity默认是关闭的。</p><h2 id="分包下载"><a href="#分包下载" class="headerlink" title="分包下载"></a>分包下载</h2><p>目前框架中的逻辑是一次性下载完全部的资源，这样的坏处就是会造成内存浪费，如果是强制下载再进入游戏的话也会使进入游戏时间过长，体验拉跨。但是在实际开发中，往往会需要我们按需下载，比如只下载下一关、根据玩家选择下载不同的内容，这里就对这个功能进行了部分扩展。</p><h3 id="如何分包"><a href="#如何分包" class="headerlink" title="如何分包"></a>如何分包</h3><p>YooAsset中将资源分为Package和Asset Tags，下面有对应的总结。博主这里用的是Tags来进行资源管理，主要原因是对于目前正在做的Demo足够了。另一个原因是，如果用Package的话，最理想的方式还需要额外写一套方法，将附加Package的资源索引也当作热更资源，以后遇到使用场景再尝试添加吧。</p><table><thead><tr><th>维度</th><th>Package（资源包裹）</th><th>Asset Tags（资源标签）</th></tr></thead><tbody><tr><td><strong>本质</strong></td><td>构建单元（Build Unit）</td><td>逻辑标记（Label &#x2F; Flag）</td></tr><tr><td><strong>作用</strong></td><td>隔离资源、独立构建、独立补丁</td><td>给资源打关键字，用于运行时筛选</td></tr><tr><td><strong>构建结果</strong></td><td>生成独立的补丁文件夹（patch）</td><td>无独立文件，仅写入清单（manifest）</td></tr><tr><td><strong>数量</strong></td><td>多个 Package 可并存（如 Main、DLC、MOD）</td><td>单个资源可打多个标签（用“;”分隔）</td></tr><tr><td><strong>使用场景</strong></td><td>模块化打包、DLC&#x2F;渠道包、并行构建</td><td>首包控制、按需下载、版本差异、运行时过滤</td></tr></tbody></table><h3 id="资源打包"><a href="#资源打包" class="headerlink" title="资源打包"></a>资源打包</h3><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301426310.png" alt="测试资源"><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507301443238.png" alt="Build设置"></p><p>图一是资源打标签，博主这里添加了三个场景，分别对应Tags，Level3 、4、5，也就是这次需要按需下载的资源，其余的资源全部为Base。</p><p>图二是出包的设置，这里选择按标签复制，图上会把Base标签的资源打入StreamingAssets，外部输出的则是所有资源。我们直接将输出的文件丢到服务器上即可。</p><h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><p>1、脚本<code>IResourceModule</code>中新重载创建下载器函数，第一个接口是默认的，第二个接口是我们新增的，<code>string[] tags</code>就是传入指定Tags的参数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 创建资源下载器，用于下载当前资源版本所有的资源包文件。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;customPackageName&quot;&gt;</span>指定资源包的名称。不传使用默认资源包<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function">ResourceDownloaderOperation <span class="hljs-title">CreateResourceDownloader</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> customPackageName = <span class="hljs-string">&quot;&quot;</span></span>)</span>;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 创建资源下载器，用于下载当前资源版本所有的资源包文件。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;customPackageName&quot;&gt;</span>指定资源包的名称。不传使用默认资源包<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function">ResourceDownloaderOperation <span class="hljs-title">CreateResourceDownloader</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] tags, <span class="hljs-built_in">string</span> customPackageName = <span class="hljs-string">&quot;&quot;</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>2、在<code>ResourceModule</code>中实现刚才的接口，另外新增一个判断标签是否存在函数，因为YooAsset本来就能区分标签，只用随便Copy下就行。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 创建资源下载器，根据tag下载当前资源版本所有的资源包文件。</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;tags&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;customPackageName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResourceDownloaderOperation <span class="hljs-title">CreateResourceDownloader</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] tags, <span class="hljs-built_in">string</span> customPackageName = <span class="hljs-string">&quot;&quot;</span></span>)</span><br>&#123;<br>    ResourcePackage package = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(customPackageName))<br>    &#123;<br>        package = YooAssets.GetPackage(<span class="hljs-keyword">this</span>.DefaultPackageName);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        package = YooAssets.GetPackage(customPackageName);<br>    &#125;<br>    Downloader = package.CreateResourceDownloader(tags, DownloadingMaxNum, FailedTryAgain);<br>    <span class="hljs-keyword">return</span> Downloader;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsTagResourcesExist</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> tag, <span class="hljs-built_in">string</span> packageName = <span class="hljs-string">&quot;&quot;</span></span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> package = <span class="hljs-built_in">string</span>.IsNullOrEmpty(packageName)<br>        ? YooAssets.GetPackage(DefaultPackageName)<br>        : YooAssets.GetPackage(packageName);<br><br>    <span class="hljs-comment">// 1. 获取标签对应的所有资源包信息</span><br>    <span class="hljs-keyword">var</span> bundleInfos = package.GetAssetInfo(tag);<br><br>    <span class="hljs-keyword">if</span> (bundleInfos == <span class="hljs-literal">null</span>)<br>    &#123;<br>        Log.Warning(<span class="hljs-string">$&quot;No resources found for tag: <span class="hljs-subst">&#123;tag&#125;</span>&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、<code>ProcedureCreateDownloader</code>脚本是游戏启动时检测线上资源的脚本，将<code>CreateResourceDownloader</code>方法传入<code>Base</code>就可以做到启动游戏是判断<code>Base</code>资源是否完整了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 换成带参的CreateResourceDownloader方法</span><br>_downloader = _resourceModule.CreateResourceDownloader(GameModule.Resource.DefaultTagName);<br></code></pre></td></tr></table></figure><p>4、最后就是按需下载资源，这里贴出一个参考代码，博主这边测试是能够运行的，但是很明显代码的保护机制做的不是很完善，最核心的代码就是<code>HandleLevelDownloadAsync</code>函数前面几行，框架里的用法其实大差不多，只是机制更加完整。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> UniTask <span class="hljs-title">ShowLevelSelectionButtonItems</span>()</span><br>&#123;<br>    <span class="hljs-built_in">int</span> index = <span class="hljs-number">0</span>;<br>    List&lt;UniTask&gt; downloadTasks = <span class="hljs-keyword">new</span> List&lt;UniTask&gt;();<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> itemdata <span class="hljs-keyword">in</span> LevelDataControl.Instance.GetAllLevelData())<br>    &#123;<br><span class="hljs-comment">// 创建子窗口，省略</span><br><br>        <span class="hljs-comment">// 检测并下载对应资源</span><br>        <span class="hljs-keyword">var</span> task = HandleLevelDownloadAsync(itemdata.GroupName, itemdata.PackageName, itemdata.Id);<br>        downloadTasks.Add(task);<br><br>        index++;<br>    &#125;<br><br>    <span class="hljs-comment">// 等待所有下载任务完成</span><br>    <span class="hljs-keyword">await</span> UniTask.WhenAll(downloadTasks);<br>&#125;<br><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 下载level的函数</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;packageName&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;levelId&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> UniTask <span class="hljs-title">HandleLevelDownloadAsync</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> tag, <span class="hljs-built_in">string</span> packageName, <span class="hljs-built_in">int</span> levelId</span>)</span><br>&#123;<br><span class="hljs-comment">// 获取并更新远端版本</span><br><span class="hljs-keyword">var</span> versionOp = GameModule.Resource.RequestPackageVersionAsync(<span class="hljs-literal">false</span>, <span class="hljs-number">60</span>, packageName);<br><span class="hljs-keyword">await</span> versionOp.ToUniTask();<br><br><span class="hljs-comment">//创建下载器</span><br><span class="hljs-keyword">await</span> GameModule.Resource.UpdatePackageManifestAsync(versionOp.PackageVersion, <span class="hljs-number">60</span>, packageName);<br><span class="hljs-keyword">var</span> downloader = GameModule.Resource.CreateResourceDownloader(<span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[] &#123; tag &#125;, packageName);<br><br><span class="hljs-keyword">if</span> (downloader.TotalDownloadCount &gt; <span class="hljs-number">0</span>)<br>&#123;<br>    Log.Debug(<span class="hljs-string">&quot;开始下载关卡资源包: &#123;0&#125; - &#123;1&#125;&quot;</span>, packageName, levelId);<br>    downloader.DownloadUpdateCallback = (downloadUpdateData) =&gt;<br>    &#123;<br>        Log.Debug(<span class="hljs-string">&quot;download update &#123;0&#125;&quot;</span>, downloader.Progress);<br>        GameEvent.Send(ChangeSceneEvent.LevelDownloadProgress, <span class="hljs-keyword">new</span> LevelDownloadProgress(levelId, downloader.Progress));<br>    &#125;;<br><br>    downloader.DownloadErrorCallback = (error) =&gt;<br>    &#123;<br>        Log.Error(<span class="hljs-string">$&quot;下载出错 [<span class="hljs-subst">&#123;packageName&#125;</span>] : <span class="hljs-subst">&#123;error&#125;</span>&quot;</span>);<br>        GameEvent.Send(ChangeSceneEvent.LevelDownloadProgress, <span class="hljs-keyword">new</span> LevelDownloadProgress(levelId, <span class="hljs-number">-1f</span>));<br>    &#125;;<br><br>    downloader.BeginDownload();<br>    <span class="hljs-keyword">await</span> downloader.ToUniTask();<br><br>    <span class="hljs-keyword">if</span> (downloader.IsDone)<br>    &#123;<br>        GameEvent.Send(ChangeSceneEvent.LevelDownloadProgress, <span class="hljs-keyword">new</span> LevelDownloadProgress(levelId, <span class="hljs-number">1f</span>));<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        Log.Error(<span class="hljs-string">$&quot;资源包 <span class="hljs-subst">&#123;packageName&#125;</span> 下载失败！&quot;</span>);<br>        GameEvent.Send(ChangeSceneEvent.LevelDownloadProgress, <span class="hljs-keyword">new</span> LevelDownloadProgress(levelId, <span class="hljs-number">-1f</span>));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">// 已经有资源就直接标记完成</span><br>    GameEvent.Send(ChangeSceneEvent.LevelDownloadProgress, <span class="hljs-keyword">new</span> LevelDownloadProgress(levelId, <span class="hljs-number">1f</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><!-- flag of hidden posts -->]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>TEngine</tag>
      
      <tag>YooAsset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEngine框架学习 基于TEngine框架实现的塔防Demo</title>
    <link href="/2025/07/11/TEngineLean2/"/>
    <url>/2025/07/11/TEngineLean2/</url>
    
    <content type="html"><![CDATA[<h2 id="项目链接"><a href="#项目链接" class="headerlink" title="项目链接"></a>项目链接</h2><p>GitHub: <a href="https://github.com/DrFlower/TowerDefense-GameFramework-Demo">基于TEngine框架实现的塔防Demo</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该项目是在<a href="https://github.com/Alex-Rachel/TEngine">TEngine框架</a>的基础上，使用Unity开源资源，大量参考开源项目“<a href="https://github.com/DrFlower/TowerDefense-GameFramework-Demo">基于Unity开源框架GameFramewrk实现的一款塔防游戏Demo</a>”制作的一款塔防Demo。</p><p>TE框架是一款非常优秀的Unity开源框架，目前相关的文档还不够完善，Demo也比较少。所以本着学习TE框架的心态，效仿花桑大佬复刻了一个基于TE框架的塔防Demo，同时记录一下自己在使用TE框架心得和遇到的坑，希望能给后来人一些经验和启发。</p><h2 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h2><ul><li><p>Unity: 2022.3.10f1</p></li><li><p>TEngine: 2025.5.20</p></li><li><p>YooAsset: 2.3.8</p></li><li><p>HybridCLR: 7.6.0</p></li><li><p>Tower Defense Template: 1.4.1</p></li></ul><h2 id="项目内容"><a href="#项目内容" class="headerlink" title="项目内容"></a>项目内容</h2><p>本项目测试了了Windows打包运行和热更新，运用到了TE框架里大部分的模块，包括资源模块、事件模块、UI模块、流程模块、FSM模块、多语言模块、内存池和对象池模块。使用了Luban配置表工具、YooAsset打包工具和HybridCLR热更新工具。后续可能会根据该项目出一些TE框架的教程，到时候会一并贴出。</p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p></pre></p><p>├─ AssetArt                    &#x2F;&#x2F; 美术产出物（非运行时直接引用）<br>│  └─ Atlas                    &#x2F;&#x2F; 图集原始文件（TexturePacker 等导出的 .tps &#x2F; .png）<br>├─ AssetRaw                    &#x2F;&#x2F; 原始资源（策划&#x2F;美术直接维护）<br>│  ├─ Actor                    &#x2F;&#x2F; 角色&#x2F;机关&#x2F;塔等实体的预制体<br>│  ├─ Audios                   &#x2F;&#x2F; 音频<br>│  ├─ Configs                  &#x2F;&#x2F; 策划配置<br>│  │  ├─ bytes                 &#x2F;&#x2F;   Luban生成的二进制表<br>│  │  └─ Localization          &#x2F;&#x2F;   I2 Localization 用的多语言CSV<br>│  ├─ DLL                      &#x2F;&#x2F; 第三方托管 DLL（LitJson、Luban.Runtime 等）<br>│  ├─ Effects                  &#x2F;&#x2F; 特效源文件（.prefab &#x2F; .fbx &#x2F; .shadergraph）<br>│  ├─ Fonts                    &#x2F;&#x2F; 字体<br>│  ├─ Materials                &#x2F;&#x2F; 材质球（sharedMaterial）<br>│  ├─ Res                      &#x2F;&#x2F; 运行时真正打进包体的资源（Animations、Models、Particles、Scenes…）<br>│  ├─ Scenes                   &#x2F;&#x2F; 主工程 Scenes（实际 Build 用）<br>│  ├─ Shaders                  &#x2F;&#x2F; 着色器源文件<br>│  ├─ UI                       &#x2F;&#x2F; UI Prefab（运行时动态加载）<br>│  └─ UIRaw                    &#x2F;&#x2F; UI 美术源文件（PSD、切图、未打图集）<br>├─ Editor                      &#x2F;&#x2F; 纯编辑器扩展脚本<br>├─ GameScripts                 &#x2F;&#x2F; 业务代码（热更 + 原生）<br>│  ├─ HotFix                  &#x2F;&#x2F; 游戏热更程序集目录<br>│  │  ├─ GameLogic            &#x2F;&#x2F;   游戏业务逻辑程序集<br>│  │  └─ GameProto            &#x2F;&#x2F;   游戏配置协议程序集<br>│  └─ Procedure               &#x2F;&#x2F;   原生程序集里的流程入口<br>├─ HybridCLRGenerate           &#x2F;&#x2F; HybridCLR 生成 Wrappers &amp; AOT dll 的临时目录<br>├─ Launcher                    &#x2F;&#x2F; 原生启动场景<br>├─ MobileDependencyResolver    &#x2F;&#x2F; Google Play Resolver 插件<br>├─ Scenes                      &#x2F;&#x2F; 真正 Build Settings 里挂的入口场景<br>├─ StreamingAssets             &#x2F;&#x2F; 随包体拷贝的只读资源<br>├─ TEngine                     &#x2F;&#x2F; TEngine 框架本体</p><p></pre></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202507181132652.png" alt="Luban目录"></p><p>工程里已经包含了配置表和Luban的依赖，如上图所示点击<code>Gen_Bin-Custom.bat</code>即可生成配置文件和代码到工程中。<br>在原资源模块基础上添加了分包下载的逻辑，进入游戏只有下载<code>Base</code>标签的资源，进入关卡选择后会根据表格下载<code>Level3</code>、<code>Level4</code>等关卡资源。</p><h3 id="待完善的地方"><a href="#待完善的地方" class="headerlink" title="待完善的地方"></a>待完善的地方</h3><ul><li>实体模块要更换，在写这个项目的时候TE框架还没有更新实体模块，所以照着GF框架自己添加了一个，仅供参考，后续会换成TE里的实体模块。</li><li>存档模块需要完善，现在用的存档模块很简陋，后续会修改。</li><li>内存池引用池运用存在问题，现在的用法比较除暴，对象池用的还是TE打飞机框架中的脚本，后续会优化一下。</li><li>没有运用到服务器和网络功能，后续会考虑添加。</li></ul><h2 id="相关引用"><a href="#相关引用" class="headerlink" title="相关引用"></a>相关引用</h2><ul><li><a href="https://github.com/DrFlower/TowerDefense-GameFramework-Demo">基于Unity开源框架GameFramewrk实现的一款塔防游戏Demo</a></li><li><a href="https://gitee.com/tuzhong_w/tower-defense-tengine-demo">用te框架仿照gf的框架的重写</a></li><li><a href="https://github.com/Alex-Rachel/TEngine">TEngine框架</a></li><li><a href="https://github.com/focus-creative-games/luban">Luban</a></li><li><a href="https://blog.meo39.com/2025/06/09/lubanLean1/">Luban配置教程和按文件加载优化</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>TEngine</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Unity】Luban配置教程和按文件加载优化</title>
    <link href="/2025/06/09/lubanLean1/"/>
    <url>/2025/06/09/lubanLean1/</url>
    
    <content type="html"><![CDATA[<p>Github地址：<a href="https://github.com/focus-creative-games/luban">https://github.com/focus-creative-games/luban</a></p><p>官方文档：<a href="https://luban.doc.code-philosophy.com/">https://luban.doc.code-philosophy.com/</a></p><p>官方示例工程：<a href="https://github.com/focus-creative-games/luban_examples">https://github.com/focus-creative-games/luban_examples</a></p><p>参考文章：<a href="https://blog.csdn.net/wankcn/article/details/127883528?spm=1001.2014.3001.5502">Unity导表工具Luban插件的数据加载原理与优化</a></p><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>​luban是一个强大、易用、优雅、稳定的游戏配置解决方案，虽然luban配置起来比较麻烦，但是博主依旧愿意向大部分人推荐，这里列举几个自己喜欢的点：</p><ul><li><p><strong>强大的数据校验功能</strong>，可以有效避免策划或者程序瞎搞配置表弄出的bug。</p></li><li><p><strong>支持使用OOP类型继承</strong>，极大的丰富了表格的使用方式。</p></li><li><p>统一了工作流，提高了策划和程序的效率。</p></li><li><p>当使用C#+bytes时，<strong>文件占用小、加载速度快、几乎无GC</strong>。</p><p>其实除了上面讲的，luban还有很多优势，这里就不一一赘述了。本篇博客主要讲了作为程序在使用luban时的配置和优化，后面或许会再加一篇表构建和运动的帖子。</p></li></ul><h3 id="二、Luban配置和基本使用教程"><a href="#二、Luban配置和基本使用教程" class="headerlink" title="二、Luban配置和基本使用教程"></a>二、Luban配置和基本使用教程</h3><ol><li><p>配置环境</p><p>首先，安装<a href="https://dotnet.microsoft.com/download/dotnet/8.0">dotnet sdk 8.0</a>或更高版本sdk。</p><p>然后，下载<a href="https://gitee.com/focus-creative-games/luban_examples">luban_examples项目</a>。</p><p>最后，unity AssetManager使用Git方式安装luban插件：<a href="https://github.com/focus-creative-games/luban_unity.git">https://github.com/focus-creative-games/luban_unity.git</a></p></li><li><p>配置luban</p><p>打开luban的实列工程文件夹，这里讲讲四个主要文件夹</p><ul><li>DataTables：一个复杂的配置表文件</li><li>MiniTemplate：一个小的示例，点击<code>gen.bat</code>后快速生成一个json配置表</li><li>Projects：一大堆各式各样的模板示例</li><li>Tools：编译好的luban的dll和模板</li></ul><p>因为博主使用的是C#+bytes的方式，这里以Projects下的Csharp_Unity_LazyLoad_bin为基础讲解，这里贴出<code>gen.bat</code>的解析，代码和注释如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">set</span> WORKSPACE=..\..<br><br><span class="hljs-built_in">set</span> LUBAN_DLL=<span class="hljs-variable">%WORKSPACE%</span>\Tools\Luban\Luban.dll<br>## LUBAN_DLL是Luban工具Dll的位置<br><span class="hljs-built_in">set</span> CONF_ROOT=<span class="hljs-variable">%WORKSPACE%</span>\DataTables<br>## CONF_ROOT是表所有的位置<br><br>dotnet <span class="hljs-variable">%LUBAN_DLL%</span> ^<br>    -t client ^<br>    -c cs-lazyload-bin ^<br>    -d bin bin-offsetlength  ^<br>    --conf <span class="hljs-variable">%CONF_ROOT%</span>\luban.conf ^<br>    -x outputCodeDir=Unity/Assets/Gen ^<br>    -x bin.outputDataDir=Unity/Assets/StreamingAssets/Config/bin ^<br>    -x bin-offsetlength.outputDataDir=Unity/Assets/StreamingAssets/Config/offset ^<br>    -x pathValidator.rootDir=<span class="hljs-variable">%WORKSPACE%</span>\Projects\Csharp_Unity_bin ^<br>    -x l10n.textProviderFile=*@<span class="hljs-variable">%WORKSPACE%</span>\DataTables\Datas\l10n\texts.json<br><br><span class="hljs-built_in">pause</span><br></code></pre></td></tr></table></figure><p><code>LUBAN_DLL</code>是luban工具dll的位置</p><p><code>CONF_ROOT</code>是表所有的位置</p><p><code>outputCodeDir</code>是生成C#代码的位置，为了避免误删，一定要是空文件夹。</p><p><code>outputDataDir</code>是bytes文件的输出目录为</p><p><code>pathValidator</code>是设置路径验证器的根目录</p><p>双击<code>gen.bat</code>后，如果一切正常会以<em>bey~</em>结束，表示配置成功。并在当前<code>Unity\Assets</code>里生成对应的代码和bytes文件。</p></li><li><p>配置Unity</p><p>如果unity已经安装了上面的插件，实例工程中有两个脚本需要关注<code>Main.cs</code>和<code>ConfigManager.cs</code>，main里调用的bytes文件加载和一堆测试用例，这里不做赘述。<code>ConfigManager.cs</code>脚本才是核心的管理类。以下是官方的提供的实例代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> cfg;<br><span class="hljs-keyword">using</span> Luban;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ConfigManager</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Tables tables;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">byte</span>[] BUFFER = <span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Dictionary&lt;<span class="hljs-built_in">string</span>, FileStream&gt; fileStreams;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadTables</span>()</span><br>    &#123;<br>        fileStreams = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, FileStream&gt;(Tables.TABLE_COUNT / <span class="hljs-number">2</span>);<br>        tables = <span class="hljs-keyword">new</span> cfg.Tables(LoadOffsetByteBuf, ByteBufLoader);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> fs <span class="hljs-keyword">in</span> fileStreams.Values)<br>        &#123;<br>            fs.Dispose();<br>        &#125;<br>        fileStreams.Clear();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ByteBuf <span class="hljs-title">LoadOffsetByteBuf</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> <span class="hljs-keyword">file</span></span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> a = File.ReadAllBytes(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;Application.streamingAssetsPath&#125;</span>/Config/offset/<span class="hljs-subst">&#123;<span class="hljs-keyword">file</span>&#125;</span>.bytes&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ByteBuf(a);<br>    &#125;<br><br>    <span class="hljs-comment">//注意： 安卓平台和WebGL平台不能读取StreamingAssetsPath下的文件，这里只提供思路，可以根据各自项目情况作出调整</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ByteBuf <span class="hljs-title">ByteBufLoader</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> <span class="hljs-keyword">file</span>, <span class="hljs-built_in">int</span> offset, <span class="hljs-built_in">int</span> length</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!fileStreams.TryGetValue(<span class="hljs-keyword">file</span>, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> fs))<br>        &#123;<br>            fs = <span class="hljs-keyword">new</span> FileStream(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;Application.streamingAssetsPath&#125;</span>/Config/bin/<span class="hljs-subst">&#123;<span class="hljs-keyword">file</span>&#125;</span>.bytes&quot;</span>, FileMode.Open);<br>            fileStreams.Add(<span class="hljs-keyword">file</span>, fs);<br>        &#125;<br>        fs.Seek(offset, SeekOrigin.Begin);<br>        fs.Read(BUFFER, <span class="hljs-number">0</span>, length);<br>        <span class="hljs-keyword">var</span> buf = <span class="hljs-keyword">new</span> ByteBuf(BUFFER, <span class="hljs-number">0</span>, length);<br>        <span class="hljs-keyword">return</span> buf;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>ByteBufLoader</code>加载Bytes文件，然后再调用再将加载的<code>ByteBuf</code>数据一一匹配给<code>Tables</code>变量中的变量。</p><p>需要注意的地方是，需要根据文件的位置和项目的加载方式修改<code>ByteBufLoader</code>函数，比如可以换成ab包加载。<code>Tables</code>是luban自动生成的，不要随意修改代码，以免被覆盖。</p></li></ol><h3 id="三、Luban优化教程"><a href="#三、Luban优化教程" class="headerlink" title="三、Luban优化教程"></a>三、Luban优化教程</h3><p>通过学习官方的实例工程，可以发现一个问题，所有的数据都是一次性全部加载的，这并不合理，尤其是既需要游戏初始化时加载一些数据，又有很多大文件，这会造成浪费内存拖慢启动。所以这里给出一个按文件加载的优化方案。这里参考了大佬<a href="https://blog.csdn.net/wankcn">明天不吃鱼</a>的帖子<a href="https://blog.csdn.net/wankcn/article/details/127883528?spm=1001.2014.3001.5502">Unity导表工具Luban插件的数据加载原理与优化</a>。</p><p>这里和大佬不一样的地方有两个，一个是大佬用的是c#+json的方案，博主使用的c#+bin，另一个是博主在大佬的基础上添加了引用解析。核心思路其实很简单，就是修改<code>tables.sbn</code>和和<code>table.sbn</code>模板，使得其继承接口*<code>IVOFun</code>*，通过该接口添加对应数据，并在加载数据时自动进行应用解析。</p><ol><li><p>修改<code>tables.sbn</code>和<code>table.sbn</code>模板</p><p>下图就是默认模板所在的路径和我们需要的文件，文件夹里包含<code>bean.sbn</code>,<code>tables.sbn</code>和<code>table.sbn</code>三个文件，我们只需要后面两个。</p><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202506101505320.png" alt="image-20250610150510252"></p><p>如下图在bat目录下创建文件夹<code>CustomTemplate</code>再创建<code>cs-bin</code>文件夹，然后将默认的<code>tables.sbn</code>和<code>table.sbn</code>丢进去</p><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202506101502672.png" alt="image-20250610150242554"></p><p>大佬关于修改模板的原理已经解释的非常详细了，这里就直接贴出修改后的模板代码，有些许不同可以自行比对。</p><p>首先是<code>tables.sbn</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">using Luban;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">namespace_with_grace_begin</span> __namespace&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">/// <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><br><span class="language-xml">/// 所有对象继承必须继承该接口</span><br><span class="language-xml">/// 仅在加载数据时调用</span><br><span class="language-xml">/// <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><br><span class="language-xml">public interface IVOFun</span><br><span class="language-xml">&#123;</span><br><span class="language-xml">void _LoadData(ByteBuf _buf);</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">/// <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><br><span class="language-xml">/// 用于解析引用关系</span><br><span class="language-xml">/// <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><br><span class="language-xml">public interface IResolvable</span><br><span class="language-xml">&#123;</span><br><span class="language-xml">    void ResolveRef(Tables tables);</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">public partial class </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">__name</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">&#123;</span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;~<span class="hljs-name">for</span> table in __tables ~&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;~<span class="hljs-name"><span class="hljs-built_in">if</span></span> table.comment != <span class="hljs-string">&#x27;&#x27;</span> ~&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    /// <span class="hljs-tag">&lt;<span class="hljs-name">summary</span>&gt;</span></span><br><span class="language-xml">    /// </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">escape_comment</span> table.comment&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    /// <span class="hljs-tag">&lt;/<span class="hljs-name">summary</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;~<span class="hljs-name">end</span>~&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    public </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">table.full_name</span>&#125;&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">format_property_name</span> __code_style table.name&#125;&#125;</span><span class="language-xml"> &#123;get; set;&#125;</span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123;~<span class="hljs-name">end</span>~&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">    public </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">__name</span>&#125;&#125;</span><span class="language-xml">()&#123; &#125;</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">namespace_with_grace_end</span> __namespace&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>然后是<code>table.sbn</code>，其实只修改了一下构造函数，将构造函数拆分了。</p><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202506101525128.png" alt="image-20250610152553024"></p><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202506101526896.png" alt="image-20250610152625821"></p><p>如上图所示，在末尾添加函数_LoadData</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">public void _LoadData(ByteBuf _buf)</span><br><span class="language-xml">    &#123;</span><br><span class="language-xml">        for(int n = _buf.ReadSize() ; n &gt; 0 ; --n)</span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">declaring_type_name</span> value_type&#125;&#125;</span><span class="language-xml"> _v;</span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">deserialize</span> <span class="hljs-string">&#x27;_buf&#x27;</span> <span class="hljs-string">&#x27;_v&#x27;</span> value_type&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">            _dataList.Add(_v);</span><br><span class="language-xml">            _dataMap.Add(_v.</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">format_property_name</span> __code_style __table.index_field.name&#125;&#125;</span><span class="language-xml">, _v);</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    &#125;</span><br></code></pre></td></tr></table></figure><p>最后一步，修改bat代码，在<code>dotnet</code>中添加一句<code>--customTemplateDir %WORKSPACE%\CustomTemplate^</code>，运行即可。</p></li><li><p>修改管理类</p><p>核心就是将原本<code>Table</code>做的事儿交给了这个类来做，变成自己管理一个字典去控制数据，每次取数据前看字典里是否有，没有则去加载，加载后再通过放射去进行一次引用解析，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">readonly</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; tables = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;();<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">GetVOData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName</span>) <span class="hljs-keyword">where</span> T : IVOFun, <span class="hljs-keyword">new</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (tables.TryGetValue(fileName, <span class="hljs-keyword">out</span> <span class="hljs-keyword">var</span> cached))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (T)cached;<br>    &#125;<br><br>    <span class="hljs-comment">//根据自己喜欢的方式获取文件路径</span><br>    <span class="hljs-built_in">string</span> path = <span class="hljs-string">$&quot;<span class="hljs-subst">&#123;Application.dataPath&#125;</span>/xxx/<span class="hljs-subst">&#123;fileName&#125;</span>.bytes&quot;</span>;<br>    <span class="hljs-keyword">if</span> (!File.Exists(path))<br>    &#123;<br>        Debug.LogError(<span class="hljs-string">$&quot;Config file not found: <span class="hljs-subst">&#123;path&#125;</span>&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">default</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> data = <span class="hljs-keyword">new</span> T();<br>    <span class="hljs-comment">//这里只是测试，最好换成其他方式，比如异步ab包加载等方式</span><br>    <span class="hljs-keyword">var</span> bytes = File.ReadAllBytes(path);<br>    data._LoadData(<span class="hljs-keyword">new</span> ByteBuf(bytes));<br>    tables[fileName] = data;<br><br>    <span class="hljs-comment">// 关键点：动态构造 Tables 并自动填充属性</span><br>    Tables tableContainer = <span class="hljs-keyword">new</span> Tables();<br>    Type tablesType = <span class="hljs-keyword">typeof</span>(Tables);<br><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> kv <span class="hljs-keyword">in</span> tables)<br>    &#123;<br>        <span class="hljs-built_in">string</span> key = kv.Key;           <span class="hljs-comment">// 比如 &quot;item_tbitem&quot;</span><br>        <span class="hljs-built_in">object</span> <span class="hljs-keyword">value</span> = kv.Value;       <span class="hljs-comment">// 表对象，比如 TbItem</span><br><br>        <span class="hljs-built_in">string</span> inferredPropName = TryGetTablePropertyName(<span class="hljs-keyword">value</span>.GetType());<br>        <span class="hljs-keyword">if</span> (inferredPropName == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;<br><br>        PropertyInfo prop = tablesType.GetProperty(inferredPropName);<br>        <span class="hljs-keyword">if</span> (prop != <span class="hljs-literal">null</span> &amp;&amp; prop.CanWrite)<br>        &#123;<br>            prop.SetValue(tableContainer, <span class="hljs-keyword">value</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 自动调用 ResolveRef（如果支持）</span><br>    <span class="hljs-keyword">if</span> (data <span class="hljs-keyword">is</span> IResolvable resolvable)<br>    &#123;<br>        resolvable.ResolveRef(tableContainer);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 找出这个对象在 Tables 中的属性名</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;tableType&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> <span class="hljs-title">TryGetTablePropertyName</span>(<span class="hljs-params">Type tableType</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 获取类名，比如 TbItem、TbTheme 等</span><br>    <span class="hljs-built_in">string</span> typeName = tableType.Name;<br><br>    <span class="hljs-comment">// 验证它是否存在于 Tables 类型中</span><br>    <span class="hljs-keyword">var</span> tablesType = <span class="hljs-keyword">typeof</span>(Tables);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> tablesType.GetProperties())<br>    &#123;<br>        <span class="hljs-keyword">if</span> (prop.PropertyType == tableType || prop.PropertyType.IsAssignableFrom(tableType))<br>        &#123;<br>            <span class="hljs-keyword">return</span> prop.Name;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>额外的优化思路</p><p>这里提供几个博主自己在使用时的思考，</p><ul><li><p>对于小型项目，可以在设计表的时候不涉及互相引用，这样就可以不用管luban里的引用解析，加载了用就完事儿了。这里给一个参考代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">GetVOData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> fileName</span>) <span class="hljs-keyword">where</span> T : IVOFun, <span class="hljs-keyword">new</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (tables.ContainsKey(fileName))<br>    &#123;<br>        <span class="hljs-keyword">return</span> (T)tables[fileName];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> data = <span class="hljs-keyword">new</span> T();<br>        <span class="hljs-comment">//这里只是测试，最好换成其他方式，比如异步ab包加载等方式</span><br>        <span class="hljs-keyword">var</span> a = File.ReadAllBytes(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;Application.dataPath&#125;</span>/xxx/<span class="hljs-subst">&#123;fileName&#125;</span>.bytes&quot;</span>);<br>        data._LoadData(<span class="hljs-keyword">new</span> ByteBuf(a));<br>        tables.Add(fileName, data);<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>也可以通过<code>switch-case</code>之类的方法手动控制是否需要添加应用解析，因为博主懒得写就不贴了。</p></li><li><p>强烈建议可以再添加异步加载Bytes文件流的方法。</p></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CodeForces】Round 1016 (Div. 3)记录</title>
    <link href="/2025/05/27/codeforces3/"/>
    <url>/2025/05/27/codeforces3/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/2093">Codeforces Round 1016 (Div. 3)</a></p><h2 id="A-Ideal-Generator"><a href="#A-Ideal-Generator" class="headerlink" title="A. Ideal Generator"></a>A. Ideal Generator</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505271012644.png" alt="image-20250527101223537"></p><p>输入示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">5</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">73</span><br><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">5</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">73</span><br><span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t, n;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; t;<br><span class="hljs-keyword">while</span> (t--)<br>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>cout &lt;&lt; <span class="hljs-string">&quot;No&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Yes&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-Expensive-Number"><a href="#B-Expensive-Number" class="headerlink" title="B. Expensive Number"></a>B. Expensive Number</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505271130641.png" alt="image-20250527113056592"></p><p>输入示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">4<br>666<br>13700<br>102030<br>7<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">2<br>4<br>3<br>0<br></code></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t, n;<br><br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; t;<br><span class="hljs-keyword">while</span> (t--)<br>&#123;<br>string s;<br>cin &gt;&gt; s;<br><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = s.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i)<br>&#123;<br><span class="hljs-keyword">if</span> (s[i] != <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br>flag = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag)<br>&#123;<br>count++;<br>&#125;<br>&#125;<br><br><br>cout &lt;&lt; s.<span class="hljs-built_in">size</span>() - (count + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Simple-Repetition"><a href="#C-Simple-Repetition" class="headerlink" title="C. Simple Repetition+"></a>C. Simple Repetition+</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505271423739.png" alt="image-20250527142318679"></p><p>输入示例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">52 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">NO</span><br></code></pre></td></tr></table></figure><p>参考代码：</p>]]></content>
    
    
    
    <tags>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CodeForces】Round 1020 (Div. 3)记录</title>
    <link href="/2025/05/26/codeforces2/"/>
    <url>/2025/05/26/codeforces2/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/2106">Codeforces Round 1020 (Div. 3)</a></p><h2 id="A-Dr-TC"><a href="#A-Dr-TC" class="headerlink" title="A. Dr. TC"></a>A. Dr. TC</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505261652878.png" alt="image-20250526165206822"></p><p>输入示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs">5<br>3<br>101<br>1<br>1<br>5<br>00000<br>2<br>11<br>3<br>010<br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs">5<br>3<br>101<br>1<br>1<br>5<br>00000<br>2<br>11<br>3<br>010<br></code></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t, n, i, j;<br>string s;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> count;<br><br>cin &gt;&gt; t;<br><span class="hljs-keyword">while</span> (t &gt; <span class="hljs-number">0</span>)<br>&#123;<br>t--;<br>cin &gt;&gt; n;<br>cin &gt;&gt; s;<br><br>j = <span class="hljs-number">0</span>;<br>count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++)<br>&#123;<br><span class="hljs-keyword">if</span> (j == i &amp;&amp; s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br>count++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j != i &amp;&amp; s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>&#123;<br>count++;<br>&#125;<br>&#125;<br>&#125;<br><br>cout &lt;&lt; count &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-St-Chroma"><a href="#B-St-Chroma" class="headerlink" title="B. St. Chroma"></a>B. St. Chroma</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505261649737.png" alt="image-20250526164932686"></p><p>输入示例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">7</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">0</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">0</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, t, y, x;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; t;<br><span class="hljs-keyword">while</span> (t--)<br>&#123;<br>cin &gt;&gt; y &gt;&gt; x;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; y; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (i != x)<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (y != x)<br>cout &lt;&lt; x;<br>cout &lt;&lt; endl;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="C-Cherry-Bomb"><a href="#C-Cherry-Bomb" class="headerlink" title="C. Cherry Bomb"></a>C. Cherry Bomb</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505261652259.png" alt="image-20250526165249203"></p><p>示例输入：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs subunit">7<br>3 10<br>1 3 2<br><span class="hljs-string">-1</span> <span class="hljs-string">-1</span> 1<br>5 1<br>0 1 0 0 1<br><span class="hljs-string">-1</span> 0 1 0 <span class="hljs-string">-1</span><br>5 1<br>0 1 0 0 1<br><span class="hljs-string">-1</span> 1 <span class="hljs-string">-1</span> 1 <span class="hljs-string">-1</span><br>5 10<br>1 3 2 5 4<br><span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br>5 4<br>1 3 2 1 3<br>1 <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> 1 <span class="hljs-string">-1</span><br>5 4<br>1 3 2 1 3<br>2 <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> 2 0<br>5 5<br>5 0 5 4 3<br>5 <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>0<br>0<br>7<br>0<br>1<br>0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【CodeForces】Round 1017 (Div. 4)记录</title>
    <link href="/2025/05/23/codeforces1/"/>
    <url>/2025/05/23/codeforces1/</url>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/2094">Codeforces Round 1017 (Div. 4)</a></p><h2 id="A-Trippi-Troppi"><a href="#A-Trippi-Troppi" class="headerlink" title="A. Trippi Troppi"></a>A. Trippi Troppi</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505231822090.png" alt="image-20250523182202040"></p><p>输入示例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">7</span><br>united states america<br>oh my god<br>i cant lie<br><span class="hljs-keyword">binary </span>indexed tree<br><span class="hljs-keyword">believe </span>in yourself<br>skibidi slay sigma<br>god <span class="hljs-keyword">bless </span>america<br><br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">usa<br>omg<br>icl<br><span class="hljs-keyword">bit</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">biy</span><br><span class="hljs-keyword"></span>sss<br>gba<br></code></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br>string ans[<span class="hljs-number">10000</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrientAns</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>&#123;<br>cout &lt;&lt; ans[i] &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>,index = <span class="hljs-number">0</span>;<br>string tempAns;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n * <span class="hljs-number">3</span>; i++)<br>&#123;<br>string tempStr;<br>cin &gt;&gt; tempStr;<br><br><span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">2</span>)<br>&#123;<br>tempAns += tempStr[<span class="hljs-number">0</span>];<br>count++;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count == <span class="hljs-number">2</span>)<br>&#123;<br>tempAns += tempStr[<span class="hljs-number">0</span>];<br>ans[index] = tempAns;<br>tempAns.<span class="hljs-built_in">clear</span>();<br>index++;<br>count = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">PrientAns</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="B-Bobritto-Bandito"><a href="#B-Bobritto-Bandito" class="headerlink" title="B. Bobritto Bandito"></a>B. Bobritto Bandito</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505231819794.png" alt="image-20250523181952687"></p><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505231821046.png" alt="image-20250523182119998"></p><p>输入示例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">4</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">2</span> -<span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> -<span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">9 </span><span class="hljs-number">8</span> -<span class="hljs-number">6</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-1 1</span><br>0 1<br><span class="hljs-deletion">-1 2</span><br><span class="hljs-deletion">-5 3</span><br></code></pre></td></tr></table></figure><p>题目解析：把题目结构一下就行了，输入的是m、n、l、r，分别对应总天数、目标天数、总天数下的左区间和总天数下的右区间。其实根本不需要这么多参数，两个就行了，一个是n目标天数，一个是l，因为一定包含0而l和r的间隔一定等于m，所以知道l就能知道l和r，然后再选一个间隔为n且在l和r区间内的数作为答案即可。</p><p>参考代码：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs excel">#include &lt;bits/stdc++.h&gt;<br>using namespace std;<br><br><span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">days</span>[<span class="hljs-number">2000</span>], offsetDay[<span class="hljs-number">2000</span>];<br>//string ansLeft[<span class="hljs-number">2000</span>], ansRight[<span class="hljs-number">2000</span>];<br><br>void PrientAns()<br>&#123;<br>for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span>; i++)<br>&#123;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">right</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">if</span> (offsetDay[i] == <span class="hljs-number">0</span>)<br>&#123;<br>//没有偏移<br><span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>; <br><span class="hljs-built_in">right</span> = <span class="hljs-built_in">days</span>[i];<br>&#125;<br>else <span class="hljs-built_in">if</span> (-offsetDay[i] &gt;= <span class="hljs-built_in">days</span>[i])<br>&#123;<br>//偏移量大于目标天数，可以所有感染向左<br><span class="hljs-built_in">left</span> = -<span class="hljs-built_in">days</span>[i]; <br><span class="hljs-built_in">right</span> = <span class="hljs-number">0</span>;<br>&#125;<br>else<br>&#123;<br>//偏移量小于目标天数，感染需要向右分布部分<br><span class="hljs-built_in">left</span> = offsetDay[i];<br><span class="hljs-built_in">right</span> = <span class="hljs-built_in">days</span>[i] + offsetDay[i];<br>&#125;<br><br>cout &lt;&lt; <span class="hljs-built_in">left</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">right</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">int</span> main()<br>&#123;<br>cin &gt;&gt; <span class="hljs-built_in">n</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">index</span> = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span> tempNum;<br><br>for (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">n</span> * <span class="hljs-number">4</span>; i++)<br>&#123;<br>cin &gt;&gt; tempNum;<br><br><span class="hljs-built_in">if</span> (<span class="hljs-built_in">count</span> == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">count</span>++;<br>&#125;<br>else <span class="hljs-built_in">if</span> (<span class="hljs-built_in">count</span> == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">days</span>[<span class="hljs-built_in">index</span>] = tempNum;<br><span class="hljs-built_in">count</span>++;<br>&#125;<br>else <span class="hljs-built_in">if</span> (<span class="hljs-built_in">count</span> == <span class="hljs-number">2</span>)<br>&#123;<br>offsetDay[<span class="hljs-built_in">index</span>] = tempNum;<br><span class="hljs-built_in">count</span>++;<br>&#125;<br>else<br>&#123;<br><span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">index</span>++;<br>&#125;<br>&#125;<br><br>PrientAns();<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="C-Brr-Brrr-Patapim"><a href="#C-Brr-Brrr-Patapim" class="headerlink" title="C. Brr Brrr Patapim"></a>C. Brr Brrr Patapim</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505261146964.png" alt="image-20250526114635836"></p><p>输入示例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">3</span><br><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">4</span> <span class="hljs-number">3</span><br><span class="hljs-number">1</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">1</span> <span class="hljs-number">6</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <br></code></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t, n, g[<span class="hljs-number">1601</span>][<span class="hljs-number">1601</span>], j, i, x[<span class="hljs-number">1601</span>], h[<span class="hljs-number">1601</span>], p;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; t;<br><span class="hljs-keyword">while</span> (t &gt; <span class="hljs-number">0</span>)<br>&#123;<br>t--;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">1</span>; j &lt;= n; j++)<br>&#123;<br>cin &gt;&gt; g[i][j];<br>x[i + j] = g[i][j];<br>h[g[i][j]]++;<br>&#125;<br><span class="hljs-keyword">for</span> (p = <span class="hljs-number">1</span>; p &lt;= <span class="hljs-number">2</span> * n; p++)<br>&#123;<br><span class="hljs-keyword">if</span> (h[p] == <span class="hljs-number">0</span>)<br>x[<span class="hljs-number">1</span>] = p;<br>h[p] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (p = <span class="hljs-number">1</span>; p &lt;= <span class="hljs-number">2</span> * n; p++)<br>&#123;<br>cout &lt;&lt; x[p] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="D-Tung-Tung-Sahur"><a href="#D-Tung-Tung-Sahur" class="headerlink" title="D. Tung Tung Sahur"></a>D. Tung Tung Sahur</h2><p><img src="https://blogimage01.oss-cn-chengdu.aliyuncs.com/img/202505261424373.png" alt="image-20250526142447276"></p><p>输入示例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-number">5</span><br>R<br>RR<br>LRLR<br>LRLR<br>LR<br><span class="hljs-keyword">LLLR</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">LLLLLRL</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">LLLLRRLL</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">LLRLRLRRL</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">LLLRLRRLLRRRL</span><br></code></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">YES</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">NO</span><br><span class="hljs-keyword">YES</span><br></code></pre></td></tr></table></figure><p>题目解析：如果按照递归模拟的思路去做时间复杂度应该过不了，就不考虑这个办法了。这里参考了用另一种思路，先定义输入的字符串为s1和s2，s1，我们以示例中的第四个输入为例子，LLLLLRL为s1，以LLLLRRLL为s2，需要将s1和s2按照L和R分割，将s1分割成LLLLL、R、L，分别为x、y、z，将s2分割成LLLL、RR、LL，这三段分别为，a、b、c。如果a和x的关系为<code>a &gt;= x &amp;&amp; a &lt;= x * 2</code>则对b和y判断，全部通过则为yes，否则为no。 </p><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> t, n;<br>string s1, s2;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; t;<br><span class="hljs-keyword">while</span> (t--)<br>&#123;<br>cin &gt;&gt; s1;<br>cin &gt;&gt; s2;<br><br><span class="hljs-keyword">while</span> (s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>())<br>&#123;<br><span class="hljs-type">int</span> pos = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (pos &lt; s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() &amp;&amp; s1[pos] == s1[pos + <span class="hljs-number">1</span>])<br>&#123;<br>pos++;<br>&#125;<br><span class="hljs-type">int</span> num = pos + <span class="hljs-number">1</span>;<br><span class="hljs-type">char</span> c = s1[pos];<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (k &lt; s<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>() &amp;&amp; s2[k] == c)<br>&#123;<br>k++;<br>&#125;<br><span class="hljs-keyword">if</span> (k &gt;= num &amp;&amp; k &lt;= <span class="hljs-number">2</span> * num)<br>&#123;<br>s<span class="hljs-number">2.</span><span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>, k);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">break</span>;<br>s<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>, num);<br>&#125;<br><span class="hljs-keyword">if</span> (!s<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() &amp;&amp; !s<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>())<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】《Unity3D高级编程: 主程手记》02：常用的优化方式</title>
    <link href="/2025/05/22/unityLearn2/"/>
    <url>/2025/05/22/unityLearn2/</url>
    
    <content type="html"><![CDATA[<p>​本文是<a href="https://book.douban.com/subject/35732244/">《Unity3D高级编程: 主程手记》</a>的读书笔记（后面统一简称主程手记），主程手记是一本很全面的Unity进阶的书记，值得所有Unity开发都买一本读一读。博主这里将一些自己经常用得上的内容重新做了遍归纳总结，做成读书笔记也方便自己查阅。</p><h2 id="1-List和Dictionary的优化方式"><a href="#1-List和Dictionary的优化方式" class="headerlink" title="1. List和Dictionary的优化方式"></a>1. List和Dictionary的优化方式</h2><p>​List本质就是数组，Dictionary的本质是两个数组，一个数组报错索引，一个数组保存数据。</p><p>​对于List，在创建时可以预估数量给予一个默认长度，能很好节约内存和GC。</p><p>​对于Dictionary，必须要考虑哈希碰撞的问题，数组越大，哈希碰撞得概率就很小。所以在实际使用时，Key用值类型更好，也可以根据预估数量给予一个默认长度。GetHashCode()也是比较隐形的性能消耗。</p><h2 id="2-字符串问题"><a href="#2-字符串问题" class="headerlink" title="2. 字符串问题"></a>2. 字符串问题</h2><p>​在看主程手记这本书前，博主一直不知道字符串如此离谱，字符串的运用就跟吃饭喝水一样寻常，代价就是字符串也像吃饭喝水一样疯狂吃内存。主要原因就是，C#语言中，字符串没有任何缓存机制，每次都需要重新分配string内存。这里有三种办法：</p><ol><li><p>自建缓存机制。</p><p>原书中提出可以用Dictionary缓存一些标志性的字符串，每次使用时先查询字典，有则使用，没有则将其加入字典。</p></li><li><p>使用native方法。</p><p>是类似于C++的指针的方法来处理string类，书里给出了参考代码，这里不做赘述。</p></li><li><p>使用开源的第三方插件</p><p>这里有两个开源插件<a href="https://github.com/871041532/zstring">zstring</a>和<a href="https://github.com/Cysharp/ZString">ZString</a>，两者都能有效降低字符串拼接时的GC。</p></li></ol><h2 id="3-善用struct"><a href="#3-善用struct" class="headerlink" title="3. 善用struct"></a>3. 善用struct</h2><p>​从未想过<code>struct</code>如此美妙，因为<code>struct</code>是值类型，在赋值时是数据的拷贝，每个变量有独立的存储空间。因为<code>struct</code>的内存分配在栈上而且是连续的，所以分配和释放都很快，善用<code>struct</code>能很好的提升CPU的缓存命中率。这里有些使用技巧的总结：</p><ul><li>适用于数据量小的情况。</li><li>适用于频繁创建和销毁的场景中。</li></ul><h2 id="4-协程"><a href="#4-协程" class="headerlink" title="4. 协程"></a>4. 协程</h2><p>​协程是Unity中特殊的用法，其作用是能够在程序执行过程中暂停或恢复方法，达到类似多线程的效果，但是其本质还是主线程之中。携程的基本用法这里省略掉，着重写一下协程的问题和优化。</p><p>​协程会产生CG，尤其是创建和停止时，会创建大量的临时对象，增加GC负担，优化协程的方法很简单，<strong>不用协程</strong>就可以了，使用UniTask即可。</p><h2 id="5-对象池"><a href="#5-对象池" class="headerlink" title="5. 对象池"></a>5. 对象池</h2><p>​尽可能的使用对象池，这样可以减少内存池分配的次数和内存碎片，还能避免内存卸载带来的性能消耗。书中给出了实例代码，这里挖个坑后续补上自己的代码。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】《Unity3D高级编程: 主程手记》01：C#技术总结</title>
    <link href="/2025/05/21/unityLearn1/"/>
    <url>/2025/05/21/unityLearn1/</url>
    
    <content type="html"><![CDATA[<p>​本文是<a href="https://book.douban.com/subject/35732244/">《Unity3D高级编程: 主程手记》</a>的读书笔记（后面统一简称主程手记），主程手记是一本很全面的Unity进阶的书记，值得所有Unity开发都买一本读一读。博主这里将一些自己经常用得上的内容重新做了遍归纳总结，做成读书笔记也方便自己查阅。</p><h2 id="1-List的要点"><a href="#1-List的要点" class="headerlink" title="1. List的要点"></a>1. List的要点</h2><p>​原书将List的源码逐个功能进行了分析，这里就不重复引用了，直接附上<a href="https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs">源码</a>。List的要点如果用一句话总结那就是：<strong>List是由数组实现的，而不链表</strong>。也是因为底层逻辑是数组的原因，List的效率并不高。</p><ul><li><p>Add、Insert: 这两个方法的本质还是数组拷贝，List的扩容是最需要注意的地方，假如创建一个空的List，默认容量为0，在Add或者Insert元素时，会先检查容量是否足够，不足则进行2的指数级别扩容，比如2、4、8、16、32…依次扩容。<strong>所以在创建List的时候分配一个预计的默认容量能减少GC的压力，也避免浪费内存</strong>。</p></li><li><p>Remove: 同上，本质还是数组拷贝。</p></li><li><p>Contains: 使用了线性查找的方式比较元素，效率为O(n)。</p></li><li><p>Find: 同上。</p></li><li><p>Enumerator: 原书表示foreach会增加Enumerator实例，造成GC压力，在 .NET4.0以后修复了此问题。</p></li><li><p>Sort: 使用的是快速排序，效率为O(nLgn)。</p></li></ul><h2 id="2-Dictionary的要点"><a href="#2-Dictionary的要点" class="headerlink" title="2. Dictionary的要点"></a>2. Dictionary的要点</h2><p>​原书讲Dictionary解析的很好，这里博主自己做一些总结。Dictionary是Key和Value一一映射的字典型数据结构，对于Key，DIctionary做的是加入容器时对Key做Hash运算。在源码中，哈希冲突才拉链法贯穿了整个底层架构，<strong>在使用Dictionary时要尽量避免Key的Hash冲突</strong>。</p><ul><li>Add、Insert: Add和Insert的扩容方式为初始化时为0，自动扩容按照3、7、17、37的方式扩容，所以和List相同，<strong>初始化的时候给定一个大致的数量更有效率</strong>。</li><li>Remove: Remove并不会删减内存。</li><li>ContainsKey: 本质是用Key值得到哈希地址开始查询，<strong>用数值的方式做Key更有效率</strong>。</li></ul><h2 id="3-装箱、拆箱"><a href="#3-装箱、拆箱" class="headerlink" title="3. 装箱、拆箱"></a>3. 装箱、拆箱</h2><blockquote><p>C#中有引用类型（Reference Type）和值类型（Value Type)</p><p>值类型：常见的有<code>int</code>、<code>float</code>、<code>bool</code>、<code>char</code> 、<code>struct</code>、<code>enum</code> 等）。值类型数据在栈（stack）上分配内存空间。当一个值类型变量在赋值另一个变量时，时会进行数据的复制，两个变量都会有独立的内存空间和数据副本，修改一个不会影响另一个。</p><p>引用类型：常见的引用类型包括（<code>class</code>、<code>interface</code>、<code>array</code>、<code>delegate</code>）等，引用类型在堆（heap）上分配内存。当一个引用类型的变量赋值给另一个变量时，将复制内存地址的引用而不是值，所以两个变量指向同一个内存地址，修改一个变量会影响所有引用该数据的变量。</p></blockquote><p>​装箱就是把值类型实列转换为引用类型，拆箱正好相反。下面用代码分别展示一下装箱和拆箱。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">object</span> obj = a;  <span class="hljs-comment">// 装箱操作，a 的值被复制到堆上，obj 指向该堆内存地址</span><br></code></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">object</span> obj = a; <span class="hljs-comment">// 装箱</span><br><span class="hljs-built_in">int</span> b = (<span class="hljs-built_in">int</span>)obj; <span class="hljs-comment">// 拆箱，将堆上的数据复制回值类型变量 b</span><br></code></pre></td></tr></table></figure><p>​在Unity中一般只有当接口需要更加通用的时候才会需要装箱，比如一个接口参数为object，这样就支持传入任意类型。但是<strong>装箱、拆箱会消耗CPU产生内存碎片</strong>，原书中提到三种方法可以优化，分别是：</p><ol><li>Struct 通过重载函数来避免拆箱、装箱。</li><li>通过泛型来避免拆箱、装箱。</li><li>通过继承统一的接口提前拆箱、装箱，避免多次重复拆箱、装箱。</li></ol><h2 id="5-浮点数"><a href="#5-浮点数" class="headerlink" title="5. 浮点数"></a>5. 浮点数</h2><p>​浮点数也是一个老生常谈的问题了，浮点数用起来比较矛盾，可以说是<strong>既精确又不精确</strong>，一方面能保证一定的精度，另一方面呢又不能拿去比较（有些新手用&#x3D;&#x3D;比较，这不就寄了嘛），每次计算结果又不同。通过学习主程手记，总结了浮点数的特征，同时学习到几种浮点数的替代用法，很有价值。</p><ul><li><p>浮点数的特征： float为4字节（32位），范围为-3.4×10³⁸ 到 +3.4×10³⁸ 。double为8字节（64位），范围为-1.7×10³⁰⁸ 到 +1.7×10³⁰⁸。浮点数有三个重要特征：数值比较不相等；数值计算不确定；不同设备计算结果不同。</p></li><li><p>几种浮点数的优化方法：</p><ul><li>方法一：用int或long替代浮点数，比如将9.9乘以1000变成99000，这样就能保证3位的精度了，实际使用要注意int和long的精度上限问题。</li><li>方法二：用定点数保持一致性并缩小精度问题，所谓的定点数，就是将浮点数的整数位和小数位拆开操作，可以尝试在unity中自己封装。</li><li>方法三：用字符串代替浮点数，CPU和内存性能消耗都大，需要高精度的时候可以考虑。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/21/hello-world/"/>
    <url>/2025/05/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
